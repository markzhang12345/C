递归：一个过程或函数在其定义或说明中直接或间接调用自身的一种方法。
     它通常把一个大型复杂问题层层转化为一个于原问题相似的规模较小的问题来求解。


两个必要条件：存在限制条件，当满足这个条件时，递归停止
                      每次递归调用后越来越接近限制条件。

倒序打印参数部分数字的每一位：
#include<stdio.h>
void print_le(int x)
{
	int ret = 0;
	ret = x % 10;
	x = x / 10;
	printf("%d ", ret);
	if(x > 0)
	print_le(x);
}
int main()
{
	int n = 0;
	scanf_s("%d",&n);
	print_le(n);
}  



%u，无符号十进制整数

正宗递归be like：

#include<stdio.h>

void print(unsigned int n)
{
	if (n > 9)
	{
		print(n / 10);
	}
	printf("%d " , n % 10);
}
int main()
{
	unsigned int num = 0;
	scanf_s("%u", &num);
	print(num);
	return 0;
}





递归有时会遇到栈溢出的问题。
内存会分为栈区，堆区和静态区。栈区中放局部变量，函数形参。堆区进行动态内存分配。静态区放全局变量和静态变量。
每一个函数调用都要在栈区分配空间。
例：

栈区某一块：main函数的栈帧空间，里面存有一些局部变量。
                   test函数的空间，每次递归都要重新划分。栈空间不够，即栈溢出。


所以 1. 不能死递归，必须有跳出条件，且每次递归都要逼近该条件。
        2.  递归层次不能太深。 